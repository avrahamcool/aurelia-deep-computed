{"version":3,"file":"index.js","sources":["../../src/deep-computed-observer.ts","../../src/deep-computed-expression.ts","../../src/index.ts"],"sourcesContent":["import {\r\n  ObserverLocator,\r\n  subscriberCollection,\r\n  ICollectionObserverSplice,\r\n  Expression,\r\n  connectable as $connectable,\r\n  Scope,\r\n  createOverrideContext,\r\n  Binding,\r\n  Disposable\r\n} from 'aurelia-binding';\r\nimport {\r\n  DeepComputedFromPropertyDescriptor,\r\n  ICallable,\r\n  IPropertyObserver,\r\n  ICollectionObserver\r\n} from './definitions';\r\nimport { ComputedExpression } from './deep-computed-expression';\r\n\r\n// a deep observer needsd to be able to\r\n// - observe all properties, recursively without boundary\r\n// - detect a path of observer change\r\n\r\n/**\r\n * @internal The interface describes methods added by `connectable` & `subscriberCollection` decorators\r\n */\r\nexport interface DeepComputedObserver extends Binding {\r\n  _version: number;\r\n  addSubscriber(callable: (...args: any[]) => void): boolean;\r\n  addSubscriber(context: string, callable: ICallable): boolean;\r\n  addSubscriber(context: string | ICallable, callable?: ICallable): boolean;\r\n  callSubscribers(newValue: any, oldValue?: any): void;\r\n  hasSubscriber(context: string | ICallable, callable?: ICallable): boolean;\r\n  hasSubscribers(): boolean;\r\n  removeSubscriber(context: string | ICallable, callable?: ICallable): boolean;\r\n  observe(): void;\r\n  unobserve(all?: boolean): void;\r\n}\r\n\r\n// it looks better using @...(), so we cast to any instead of ClassDecorator\r\n// aurelia decorators support both usage: with and without parens\r\nconst connectable = $connectable as any;\r\n\r\n// by default, it does not support value converters & binding behaviors in the expressions\r\n// but maybe it should. TODO\r\nconst emptyLookupFunctions = {\r\n  valueConverters: name => null,\r\n  bindingBehaviors: name => null,\r\n};\r\n\r\nconst unset = {};\r\n\r\n@connectable()\r\n@subscriberCollection()\r\nexport class DeepComputedObserver {\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  private isQueued: boolean = false;\r\n  /**\r\n   * @internal\r\n   */\r\n  private oldValue: any = unset;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  private rootDeps: IDependency[];\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  private readonly scope: Scope;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  private readonly notifyingDeps: IDependency[] = [];\r\n\r\n  constructor(\r\n    public obj: object,\r\n    /**\r\n     * The expression that will be used to evaluate \r\n     */\r\n    // this expression has 2 purposes:\r\n    //  - a thin layer wrapping around getting/setting value of the targeted computed property\r\n    //  - an abstraction for dealing with a list of declared dependencies and their corresponding value\r\n    //    that uses existing Aurelia binding capabilities\r\n    public expression: ComputedExpression,\r\n    public observerLocator: ObserverLocator\r\n  ) {\r\n    this.scope = { bindingContext: obj, overrideContext: createOverrideContext(obj) };\r\n  }\r\n\r\n  getValue(): any {\r\n    return this.expression.evaluate(this.scope, emptyLookupFunctions);\r\n  }\r\n\r\n  setValue(newValue: any): void {\r\n    this.expression.assign(this.scope, newValue, emptyLookupFunctions);\r\n  }\r\n\r\n  subscribe(context: (...args: any[]) => any): Disposable;\r\n  subscribe(context: string | ICallable, callable?: ICallable): void | Disposable {\r\n    if (!this.hasSubscribers()) {\r\n      this.oldValue = this.expression.evaluate(this.scope, emptyLookupFunctions);\r\n      this.expression.connect(\r\n        /* @connectable makes this class behave as Binding */this,\r\n        this.scope\r\n      );\r\n      this.observeDeps();\r\n    }\r\n    this.addSubscriber(context, callable);\r\n    // scenario where this observer is created manually via ObserverLocator.getObserver\r\n    if (arguments.length === 1 && typeof context === 'function') {\r\n      return {\r\n        dispose: () => {\r\n          this.unsubscribe(context, callable);\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  unsubscribe(context: string | ICallable, callable?: ICallable): void {\r\n    if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {\r\n      this.unobserveDeps();\r\n      this.unobserve(true);\r\n      this.oldValue = unset;\r\n      this.notifyingDeps.length = 0;\r\n    }\r\n  }\r\n\r\n  call() {\r\n    let newValue = this.expression.evaluate(this.scope, emptyLookupFunctions);\r\n    let oldValue = this.oldValue;\r\n    if (newValue !== oldValue) {\r\n      this.oldValue = newValue;\r\n      this.callSubscribers(newValue, oldValue);\r\n    }\r\n    if (this.isQueued) {\r\n      this.notifyingDeps.forEach(dep => {\r\n        if (!dep.connected) {\r\n          return;\r\n        }\r\n        dep.release();\r\n        dep.collect();\r\n        dep.observe();\r\n      });\r\n      this.isQueued = false;\r\n    } else {\r\n      this.unobserveDeps();\r\n      this.observeDeps();\r\n    }\r\n    this.notifyingDeps.length = 0;\r\n    this._version++;\r\n    this.expression.connect(/* @connectable makes this class behave as Binding */this, this.scope);\r\n    this.unobserve(false);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  handleChange(dep: IDependency, collect: boolean): void {\r\n    if (this.isQueued) {\r\n      return;\r\n    }\r\n    if (this.notifyingDeps.indexOf(dep) === -1) {\r\n      this.notifyingDeps.push(dep);\r\n    }\r\n    this.observerLocator.taskQueue.queueMicroTask(this);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  private observeDeps(): void {\r\n    const values = this.expression.getDeps(this.scope);\r\n    let rootDeps = this.rootDeps;\r\n    if (rootDeps == null) {\r\n      rootDeps = this.rootDeps = values.map(v => getDependency(this, null, v)).filter(Boolean);\r\n    }\r\n    rootDeps.forEach(dep => {\r\n      dep.collect();\r\n      dep.observe();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  private unobserveDeps(): void {\r\n    const rootDeps = this.rootDeps;\r\n    if (rootDeps != null) {\r\n      rootDeps.forEach(releaseDep);\r\n      this.rootDeps = void 0;\r\n    }\r\n  }\r\n}\r\n\r\nexport interface IDependency {\r\n  /**\r\n   * Root observer/dep of this dep\r\n   */\r\n  owner: DeepComputedObserver;\r\n  /**\r\n   * The parent dep of this dep. Represents the owner object of the object associated with this dep\r\n   */\r\n  parent: IDependency | null;\r\n  /**\r\n   * The sub dependencies of this dependency\r\n   */\r\n  deps: Map<unknown, IDependency>;\r\n  /**\r\n   * Indicates whther the dependency is observing\r\n   */\r\n  connected: boolean;\r\n  /**\r\n   * collect sub dependencies of this dependency value\r\n   */\r\n  collect(): void;\r\n  /**\r\n   * Start observing: Connect all sub dependencies to the root observer\r\n   */\r\n  observe(): void;\r\n  /**\r\n   * Release all sub dependencies of this dependency\r\n   */\r\n  release(): void;\r\n}\r\n\r\nconst releaseDep = (dep: IDependency) => {\r\n  dep.release();\r\n};\r\nconst observeDep = (dep: IDependency) => {\r\n  dep.observe();\r\n}\r\n\r\n// for Aurelia binding subscriber, a context is required if it's not a function\r\nconst objectPropDepContext = 'context:object_prop_dep';\r\nconst arrayDepContext = 'context:array_dep';\r\n\r\nclass ObjectDependency implements IDependency {\r\n\r\n  deps: Map<string | number, IDependency> = new Map();\r\n  connected: boolean = false;\r\n\r\n  constructor(\r\n    public owner: DeepComputedObserver,\r\n    public parent: IDependency | null,\r\n    public value: object\r\n  ) { }\r\n\r\n  collect(): void {\r\n    const value = this.value;\r\n    Object.keys(value).forEach(prop => {\r\n      const propertyDep = new ObjectPropertyDependency(this.owner, this, prop, value[prop]);\r\n      this.deps.set(prop, propertyDep);\r\n      propertyDep.collect();\r\n    });\r\n  }\r\n\r\n  observe() {\r\n    this.deps.forEach(observeDep);\r\n    this.connected = true;\r\n  }\r\n\r\n  release(): void {\r\n    this.deps.forEach(releaseDep);\r\n    this.connected = false;\r\n  }\r\n}\r\n\r\nclass ObjectPropertyDependency implements IDependency {\r\n  deps = new Map<any, IDependency>();\r\n\r\n  observer: IPropertyObserver;\r\n\r\n  connected: boolean = false;\r\n\r\n  constructor(\r\n    public owner: DeepComputedObserver,\r\n    public parent: ObjectDependency,\r\n    public property: string,\r\n    public value: any\r\n  ) {\r\n\r\n  }\r\n\r\n  collect(): void {\r\n    const valueDep = getDependency(this.owner, this, this.value);\r\n    if (valueDep == null) {\r\n      return;\r\n    }\r\n    this.deps.set(this, valueDep);\r\n    valueDep.collect();\r\n  }\r\n\r\n  observe(): void {\r\n    let observer = this.observer;\r\n    if (observer == null) {\r\n      observer\r\n        = this.observer\r\n        = this\r\n          .owner\r\n          .observerLocator\r\n          .getObserver(this.parent.value, this.property);\r\n    }\r\n\r\n    observer.subscribe(objectPropDepContext, this);\r\n    this.deps.forEach(observeDep);\r\n    this.connected = true;\r\n  }\r\n\r\n  release(): void {\r\n    const observer = this.observer;\r\n    if (observer != null) {\r\n      observer.unsubscribe(objectPropDepContext, this);\r\n      this.observer = void 0;\r\n    }\r\n    this.deps.forEach(releaseDep);\r\n    this.deps.clear();\r\n    this.connected = false;\r\n  }\r\n\r\n  call(): void {\r\n    // when property change\r\n    // 1. release all sub-deps\r\n    this.release();\r\n    // 2. re-evaluate the value\r\n    this.value = this.parent.value[this.property];\r\n    // 3. re-collect deps\r\n    this.collect();\r\n    this.observe();\r\n    // 4. notify the owner\r\n    this.owner.handleChange(this, /* should recollect everything? */false);\r\n  }\r\n}\r\n\r\nclass ArrayDependency implements IDependency {\r\n  deps: Map<string | number, IDependency> = new Map();\r\n\r\n  observer: ICollectionObserver;\r\n  connected: boolean = false;\r\n\r\n  constructor(\r\n    public owner: DeepComputedObserver,\r\n    public parent: IDependency | null,\r\n    public value: any[],\r\n  ) { }\r\n\r\n  collect(): void {\r\n    for (let i = 0, arr = this.value, ii = arr.length; ii > i; ++i) {\r\n      let value = arr[i];\r\n      const dep = getDependency(this.owner, this, value);\r\n      // if an index is not observable\r\n      // just ignore\r\n      if (dep == void 0) {\r\n        return;\r\n      }\r\n      this.deps.set(i, dep);\r\n      dep.collect();\r\n    }\r\n  }\r\n\r\n  observe() {\r\n    let observer = this.observer;\r\n    if (observer == null) {\r\n      observer\r\n        = this.observer\r\n        = this\r\n          .owner\r\n          .observerLocator\r\n          .getArrayObserver(this.value);\r\n    }\r\n\r\n    observer.subscribe(arrayDepContext, this);\r\n\r\n    this.deps.forEach(observeDep);\r\n    this.connected = true;\r\n  }\r\n\r\n  release(): void {\r\n    const observer = this.observer;\r\n    if (observer != null) {\r\n      observer.unsubscribe(arrayDepContext, this);\r\n      this.observer = void 0;\r\n    }\r\n    this.deps.forEach(releaseDep);\r\n    this.deps.clear();\r\n    this.connected = false;\r\n  }\r\n\r\n  call(changeRecords: ICollectionObserverSplice[]): void {\r\n    // when array is mutated\r\n    // 1. release\r\n    this.release();\r\n    // 2. recollect\r\n    this.collect();\r\n    this.observe();\r\n    // 3. notify owner\r\n    this.owner.handleChange(this, true);\r\n  }\r\n}\r\n\r\nclass SetDependency implements IDependency {\r\n  deps: Map<string | number, IDependency> = new Map();\r\n  connected: boolean = false;\r\n\r\n  constructor(\r\n    public owner: DeepComputedObserver,\r\n    public parent: IDependency | null,\r\n    public set: Set<any>,\r\n  ) { }\r\n\r\n  collect(): void {\r\n    this.set.forEach(value => {\r\n      const dep = getDependency(this.owner, this, value);\r\n      if (dep == void 0) {\r\n        return;\r\n      }\r\n      dep.collect();\r\n      // incorrect to typings, but safe\r\n      this.deps.set(value as any, dep);\r\n    });\r\n  }\r\n\r\n  observe(): void {\r\n    this.deps.forEach(observeDep);\r\n    this.connected = true;\r\n  }\r\n\r\n  release(): void {\r\n    this.deps.forEach(releaseDep);\r\n    this.deps.clear();\r\n    this.connected = false;\r\n  }\r\n}\r\n\r\nconst dependencyMap = new WeakMap();\r\nconst raw2Dep = new WeakMap();\r\n\r\nfunction getDependency(owner: DeepComputedObserver, parent: IDependency, value: unknown): IDependency {\r\n  const valueType = typeof value;\r\n  if (value == null || valueType === 'boolean' || valueType === 'number' || valueType === 'string' || valueType === 'symbol' || valueType === 'bigint' || typeof value === 'function') {\r\n    return;\r\n  }\r\n  if (Array.isArray(value)) {\r\n    return new ArrayDependency(owner, parent, value);\r\n  }\r\n\r\n  if (value instanceof Set) {\r\n    return new SetDependency(owner, parent, value);\r\n  }\r\n\r\n  return new ObjectDependency(owner, parent, value as object);\r\n}\r\n","import { Expression, Scope, Binding } from \"aurelia-binding\";\r\n\r\nexport class ComputedExpression extends Expression {\r\n\r\n  // this is to signal aurelia binding that it's ok trying to invoke .assign on this expression\r\n  isAssignable: boolean = true;\r\n\r\n  constructor(\r\n    public readonly name: string,\r\n    public readonly dependencies: Expression[]\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  evaluate(scope: Scope, lookupFunctions: any) {\r\n    return scope.bindingContext[this.name];\r\n  }\r\n\r\n  assign(scope: Scope, value: any, lookupFunctions: any): void {\r\n    scope.bindingContext[this.name] = value;\r\n  }\r\n\r\n  accept(visitor: any) {\r\n    throw new Error('not implemented');\r\n  }\r\n\r\n  connect(binding: Binding, scope: Scope) {\r\n    let dependencies = this.dependencies;\r\n    let i = dependencies.length;\r\n    while (i--) {\r\n      dependencies[i].connect(binding, scope);\r\n    }\r\n  }\r\n\r\n  getDeps(scope: Scope): any[] {\r\n    return this.dependencies.map(dep => dep.evaluate(scope));\r\n  }\r\n}","import {\r\n  FrameworkConfiguration,\r\n  ObserverLocator,\r\n  Parser,\r\n  InternalPropertyObserver,\r\n} from 'aurelia-framework';\r\nimport { DeepComputedFromPropertyDescriptor } from './definitions';\r\nimport { DeepComputedObserver } from './deep-computed-observer';\r\nimport { ComputedExpression } from './deep-computed-expression';\r\n\r\nexport {\r\n  DeepComputedObserver,\r\n  IDependency\r\n} from './deep-computed-observer';\r\n\r\nexport function configure(config: FrameworkConfiguration): void {\r\n  // need to run at post task to ensure we don't resolve everything too early\r\n  config.postTask(() => {\r\n    const observerLocator = config.container.get(ObserverLocator);\r\n    const parser = config.container.get(Parser);\r\n    observerLocator.addAdapter({\r\n      getObserver: (obj, propertyName, descriptor: DeepComputedFromPropertyDescriptor): InternalPropertyObserver => {\r\n        if (descriptor.get.deep) {\r\n          return createComputedObserver(obj, propertyName, descriptor, observerLocator, parser);\r\n        }\r\n        return null;\r\n      }\r\n    })\r\n  });\r\n}\r\n\r\nexport function deepComputedFrom(...expressions: string[]) {\r\n  return function (target: any, key: any, descriptor: PropertyDescriptor) {\r\n    const $descriptor = descriptor as DeepComputedFromPropertyDescriptor;\r\n    const getterFn = $descriptor.get;\r\n    getterFn.deep = true;\r\n    getterFn.deps = expressions;\r\n    getterFn.computedExpression = void 0;\r\n    return descriptor;\r\n  } as MethodDecorator;\r\n}\r\n\r\nfunction createComputedObserver(\r\n  obj: any,\r\n  propertyName: string,\r\n  descriptor: DeepComputedFromPropertyDescriptor,\r\n  observerLocator: ObserverLocator,\r\n  parser: Parser\r\n) {\r\n  let computedExpression = descriptor.get.computedExpression;\r\n  if (!(computedExpression instanceof ComputedExpression)) {\r\n    let dependencies = descriptor.get.deps;\r\n    let i = dependencies.length;\r\n    const parsedDeps = descriptor.get.parsedDeps = Array(dependencies.length);\r\n    while (i--) {\r\n      parsedDeps[i] = parser.parse(dependencies[i]);\r\n    }\r\n    computedExpression = descriptor.get.computedExpression = new ComputedExpression(propertyName, parsedDeps);\r\n  }\r\n\r\n  return new DeepComputedObserver(obj, computedExpression, observerLocator);\r\n}\r\n"],"names":["$connectable","DeepComputedObserver","createOverrideContext","subscriberCollection","Expression","ObserverLocator","Parser"],"mappings":"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"}